; some tests generated by chatGPT
; finally found a use case!

(defun run-tests ()
  (dolist (test (list
    ; Arithmetic Operations
    (lambda () (let ((result (+ 1 2)))
                (if (eq result 3) 'pass 'fail)))
    (lambda () (let ((result (- 5 3)))
                (if (eq result 2) 'pass 'fail)))
    (lambda () (let ((result (* 4 2)))
                (if (eq result 8) 'pass 'fail)))
    (lambda () (let ((result (/ 8 2)))
                (if (eq result 4) 'pass 'fail)))
    
    ; List Operations
    (lambda () (let ((result (list 1 2 3)))
                (if (eq result '(1 2 3)) 'pass 'fail)))
    (lambda () (let ((result (car '(1 2 3))))
                (if (eq result 1) 'pass 'fail)))
    (lambda () (let ((result (cdr '(1 2 3))))
                (if (eq result '(2 3)) 'pass 'fail)))
    (lambda () (let ((result (cons 1 '(2 3))))
                (if (eq result '(1 2 3)) 'pass 'fail)))
    
    ; Conditionals
    (lambda () (let ((result (if t 'true 'false)))
                (if (eq result 'true) 'pass 'fail)))
    (lambda () (let ((result (if nil 'true 'false)))
                (if (eq result 'false) 'pass 'fail)))
    
    ; Function Definition and Application
    (lambda () (progn
                (defun add2 (x) (+ x 2))
                (let ((result (add2 3)))
                (if (eq result 5) 'pass 'fail))))
    (lambda () (progn
                (defun factorial (n)
                (if (<= n 1)
                    1
                    (* n (factorial (- n 1)))))
                (let ((result (factorial 5)))
                (if (eq result 120) 'pass 'fail))))
    
    ; Let Bindings
    (lambda () (let ((x 5)
                    (y 3))
                (let ((result (+ x y)))
                (if (eq result 8) 'pass 'fail))))
    
    ; Boolean Logic
    (lambda () (let ((result (and t t)))
                (if (eq result t) 'pass 'fail)))
    (lambda () (let ((result (and t nil)))
                (if (eq result nil) 'pass 'fail)))
    (lambda () (let ((result (or t nil)))
                (if (eq result t) 'pass 'fail)))
    (lambda () (let ((result (or nil nil)))
                (if (eq result nil) 'pass 'fail)))))
    (print (funcall test))))

(run-tests)
